#include <bits/stdc++.h>
using namespace std;

struct MinHeap{

    char data;

    unsigned freq;

    MinHeap *leftChild, *rightCHild;
 
    MinHeap(char data, unsigned freq)
    {
        leftChild = rightCHild = NULL;
        this->data = data;
        this->freq = freq;
    }
};

struct compare {
    bool operator()(MinHeap* leftChild, MinHeap* rightCHild)
    {
        return (leftChild->freq > rightCHild->freq);
    }
};

void printCharCodes(struct MinHeap* root, string str)
{
    if (!root)
        return;
 
    if (root->data != '$')
        cout << "   " << root->data << "\t\t" << str << "\n";
 
    printCharCodes(root->leftChild, str + "0");
    printCharCodes(root->rightCHild, str + "1");
}

void HuffmanCodes(char data[], int freq[], int size)
{
    struct MinHeap *leftChild, *rightCHild, *top;

    priority_queue<MinHeap*, vector<MinHeap*>, compare> minHeap;
 
    for (int i = 0; i < size; ++i)
        minHeap.push(new MinHeap(data[i], freq[i]));

    while (minHeap.size() != 1) {
        leftChild = minHeap.top();
        minHeap.pop();
 
        rightCHild = minHeap.top();
        minHeap.pop();

        top = new MinHeap('$', leftChild->freq + rightCHild->freq);
 
        top->leftChild = leftChild;
        top->rightCHild = rightCHild;
 
        minHeap.push(top);
    }
    cout << "Character\t" << "Code" << endl;
    printCharCodes(minHeap.top(), "");
}

int main()
{
 
    char charList[] = { 'c', 'o', 'd', 'i', 'n', 'g' };
    int charFreq[] = { 7, 11, 13, 17, 19, 23 };
 
    int size = sizeof(charList) / sizeof(charList[0]);
 
    HuffmanCodes(charList, charFreq, size);
 
    return 0;
} 
